const db = require("../services/firebaseService");

function registerVitalsHandlers(socket, io) {
  const activeDevices = {}; // device_id -> interval

  // Step 1: ููุง ุงูุฌูุงุฒ ูุชุตู ููุณุฌู ููุณู
  socket.on("register_device", ({ device_id }) => {
    if (!device_id) return;

    // ุงุญูุธ ุงูู socket ูู ุฑูู ุฎุงุตุฉ ุจุงูุฌูุงุฒ (ูู ุญุจูุช ุชุจุนุช ููุฏูุชูุฑ ุฃู ุงูุฌูุงุฒ ูุงุญููุง)
    socket.join(device_id);

    // ูู ุงูุฌูุงุฒ ูุชุณุฌู ุจุงููุนูุ ูุชุนููุด ุชูุฑุงุฑ
    if (activeDevices[device_id]) return;

    console.log(`โ Registered new device: ${device_id}`);

    // Step 2: start interval ููู ุฌูุงุฒ ุฌุฏูุฏ
    const interval = setInterval(async () => {
      try {
        const snapshot = await db.ref(`devices/${device_id}/sensors`).once("value");
        const sensorData = snapshot.val();

        // send data to device's room
        io.to(device_id).emit("sensor_data", sensorData);
      } catch (err) {
        console.error(`Error reading from ${device_id}:`, err.message);
      }
    }, 2000);

    // ุฎุฒูู ุงูู interval ุนุดุงู ุชูููู ุจุนุฏูู
    activeDevices[device_id] = interval;
  });

  // Step 3: ูู ุงูุฌูุงุฒ ุงููุตูุ ูุธูู ุงูinterval ุจุชุงุนู
  socket.on("disconnect", () => {
    // Optional: ุชูุฏุฑ ุชูุดู ุนูู ูู ุงูุฃุฌูุฒุฉ ูุชุดูู ุงููุฑุจูุทุฉ ุจุงูุณูููุช ุงูุญุงูู (ูู ูุญุชุงุฌุฉ)
    console.log("๐ Device disconnected.");
    Object.values(activeDevices).forEach(clearInterval);
  });
}

module.exports = registerVitalsHandlers;